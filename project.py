# -*- coding: utf-8 -*-
"""PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GWNYpi_FIIC0TVcxhYlSk3PjWzXklZcH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/Insurance_data.csv')

df['target']

print(df['target'].value_counts())

import scipy.stats as stats

# Assuming df is your DataFrame and 'Gender' and 'target' are your columns

contingency_table = pd.crosstab(df['Gender'], df['target'])
chi2, p, dof, expected = stats.chi2_contingency(contingency_table)

print(f"Chi2: {chi2}, p-value: {p}")

age_corr = df.groupby('target')['Age'].mean()
print(age_corr)

avg_policies = df['No_Pol'].mean()
print(f"Average Number of Policies per Customer: {avg_policies:.2f}")

product_outcomes = pd.crosstab(df['ProductName'], df['target'], normalize='index')
print(product_outcomes)

print(df.columns)

df=df.rename(columns={'Policy End Date':'Policy_End_Date'})

df=df.rename(columns={'Policy Start Date':'Policy_Start_Date'})

df['Policy_Start_Date'] = pd.to_datetime(df['Policy_Start_Date'])
df[f'Policy_End_Date'] = pd.to_datetime(df['Policy_End_Date'])
df['Duration'] = (df['Policy_End_Date'] - df['Policy_Start_Date']).dt.days
avg_duration = df['Duration'].mean()
print(f"Average Policy Duration: {avg_duration:.2f} days")

df=df.rename(columns={'First Transaction Dte':'First_Transaction_Date'})

# Convert 'Policy_Start_Date' and 'Policy_End_Date' to datetime objects
df['Policy_Start_Date'] = pd.to_datetime(df['Policy_Start_Date'])
df['Policy_End_Date'] = pd.to_datetime(df['Policy_End_Date'])

# Now calculate the duration
df['Duration'] = (df['Policy_End_Date'] - df['Policy_Start_Date']).dt.days
avg_duration = df['Duration'].mean()
print(f"Average Policy Duration: {avg_duration:.2f} days")

df['Policy_Start_Month'] = df['Policy_Start_Date'].dt.month
monthly_trends = df['Policy_Start_Month'].value_counts().sort_index()
print(monthly_trends)

car_category_outcomes = pd.crosstab(df['Car_Category'], df['target'], normalize='index')
print(car_category_outcomes)

print(pd.crosstab(df['Subject_Car_Make'],df['target'])) # Changed 'target_variable' to 'target'

car_color_outcomes = df[df['target'] == 1]['Subject_Car_Colour'].value_counts(normalize=True)
print(car_color_outcomes)

print(df[['No_Pol','Age']].corr())

print(pd.crosstab(df['LGA_Name'],df['target']))
print(pd.crosstab(df['State'],df['target']))

gender_dist = df['Gender'].value_counts(normalize=True)
print(gender_dist)

car_categories = df['Car_Category'].value_counts().unique()
print(car_categories)

# View first few rows
print(df.head())

# Check data types
print(df.dtypes)

# Check for missing values
print(df.isnull().sum())

df=df.rename(columns={'First Transaction Date':'First_Transaction_Date'})

print(df)

df['First_Transaction_Date'] = pd.to_datetime(df['First_Transaction_Date'])
df['Policy_End_Date'] = pd.to_datetime(df['Policy_End_Date'])
df['Transaction_Duration'] = (df['Policy_End_Date'] - df['First_Transaction_Date']).dt.days
print(df[['Transaction_Duration','target']])

df=df.rename(columns={'ProductName':'Product_Name'})

print(pd.crosstab(df['Product_Name'],df['target']))

print((df['Car_Category']=='saloon').mean()*100)

df['Car_Age']= (df['Policy_Start_Date']-df['First_Transaction_Date']).dt.days/365
print(df[['Car_Age','target']].corr())

multiple_policies = df[df['No_Pol'] > 1]
outcomes = multiple_policies['target'].value_counts(normalize=True)
print(outcomes)

missing_values = df.isnull().sum()
print(missing_values)

# Data Visualization

sns.boxplot(x='target', y='Age', data=df, palette='Set2')
plt.title("Age Distribution Across Policy Outcomes")
plt.xlabel("Policy Outcome (Target)")
plt.ylabel("Age")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='Car_Category', hue='target', data=df)
plt.title('Breakdown of Car Category by Policy Outcome')
plt.xlabel('Car Category')
plt.ylabel('Count')
plt.show()

sns.boxplot(x='Gender', y='No_Pol', data=df, palette='muted')
plt.title("Number of Policies by Gender")
plt.xlabel("Gender")
plt.ylabel("Number of Policies")
plt.show()

monthly_trend = df['Policy_Start_Month'].value_counts().sort_index()
monthly_trend.plot(kind='line', marker='o', color='green', figsize=(10, 6))
plt.title("Monthly Trend of Policy Start Dates")
plt.xlabel("Month")
plt.ylabel("Number of Policies")
plt.xticks(range(1, 13))
plt.grid()
plt.show()

df['Product_Name'].value_counts().plot(kind='bar')
plt.title('Number of Policies by Product_Name')
plt.xlabel('Product_Name')
plt.ylabel('Number of Policies')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Print the column names
print(df.columns)

# Use the correct column name
sns.countplot(x='Car_Category', hue='target', data=df)
plt.title('Car Category Distribution by Target Variable')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='State', data=df)
plt.title('Geographic Distribution of Policies by State')
plt.show()

import matplotlib.pyplot as plt

plt.scatter(df['Age'], df['No_Pol'])
plt.title('Relationship between No_Pol and Age')
plt.xlabel('Age')
plt.ylabel('No_Pol')
plt.show()

import matplotlib.pyplot as plt

df['Subject_Car_Colour'].value_counts().plot(kind='pie')
plt.title("Target Variable's Distribution by Subject_Car_Colour")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.boxplot(x='Car_Category', y='Age', data=df)
plt.title('Age Distribution by Car Category')
plt.show()

